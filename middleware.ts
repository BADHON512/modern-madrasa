import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  const { cookies } = request;
  const authToken = cookies.get("session");
  const { pathname } = new URL(request.url);

  const data = JSON.parse(authToken?.value || "{}");
  console.log(data.role);

  // ЁЯФ╣ рж╕рзБржкрж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржи ржирж╛ рж╣рж▓рзЗ '/admin/dashboard' ржерзЗржХрзЗ рж╣рзЛржоржкрзЗржЬрзЗ ржкрж╛ржарж╛ржмрзЗ
  if (pathname.startsWith("/admin/dashboard") && data.role !== "SUPER_ADMIN") {
    return NextResponse.redirect(new URL("/", request.url));
  }

  // ЁЯФ╣ Next.js static & API рж░рзБржЯ ржЧрзБрж▓рзЛрж░ ржЬржирзНржп middleware ржирж╛ ржЪрж╛рж▓рж╛ржирзЛ
  if (
    pathname.startsWith("/_next/") ||
    pathname.startsWith("/static/") ||
    pathname.startsWith("/api/")
  ) {
    return NextResponse.next();
  }

  // ЁЯФ╣ рж▓ржЧрж┐ржи ржирж╛ ржХрж░рж╛ ржерж╛ржХрж▓рзЗ рж╢рзБржзрзБ '/login' ржПржмржВ '/sign-up' ржкрзЗржЬрзЗ ржпрзЗрждрзЗ ржкрж╛рж░ржмрзЗ
  if (!authToken) {
    if (pathname.startsWith("/login") || pathname.startsWith("/sign-up")) {
      return NextResponse.next();
    }
    return NextResponse.redirect(new URL("/login", request.url)); // рж░рж┐ржбрж╛ржЗрж░рзЗржХрзНржЯ ржХрж░ржмрзЗ
  }

  // ЁЯФ╣ рж▓ржЧрж┐ржи ржХрж░рж╛ ржерж╛ржХрж▓рзЗ '/login' ржПржмржВ '/sign-up' ржкрзЗржЬрзЗ ржпрзЗрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
  if (authToken && (pathname.startsWith("/login") || pathname.startsWith("/sign-up"))) {
    return NextResponse.redirect(new URL("/", request.url));
  }

  // тЬЕ рж╕ржм ржарж┐ржХ ржерж╛ржХрж▓рзЗ рж░рзБржЯ ржПржХрзНрж╕рзЗрж╕ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ
  return NextResponse.next();
}

export const config = {
  matcher: "/:path*",
};
